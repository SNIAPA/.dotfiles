return {
  'folke/which-key.nvim',
  config = function()
    local wk = require("which-key")

    wk.setup({
      triggers = { "<auto>", mode = "nixsotc" },
      layout = {
        width = { min = 20, max = 50 },
        spacing = 5,
      },
      win = {
        border = "none",
        padding = { 1, 1 },
        zindex = 1000,
      },
      icons = {
        breadcrumb = "»",
        separator = "➜",
        group = "+",
        ellipsis = "…",
        mappings = true,
        rules = {},
        colors = true,
        keys = {
          Up = " ",
          Down = " ",
          Left = " ",
          Right = " ",
          C = "󰘴 ",
          M = "󰘵 ",
          D = "󰘳 ",
          S = "󰘶 ",
          CR = "󰌑 ",
          Esc = "󱊷 ",
          ScrollWheelDown = "󱕐 ",
          ScrollWheelUp = "󱕑 ",
          NL = "󰌑 ",
          BS = "󰁮",
          Space = "󱁐 ",
          Tab = "󰌒 ",
          F1 = "󱊫",
          F2 = "󱊬",
          F3 = "󱊭",
          F4 = "󱊮",
          F5 = "󱊯",
          F6 = "󱊰",
          F7 = "󱊱",
          F8 = "󱊲",
          F9 = "󱊳",
          F10 = "󱊴",
          F11 = "󱊵",
          F12 = "󱊶",
        },
      },
    })

    wk.add({
      { "<leader>C", "<cmd>bd<CR>", desc = "Close buffer and window", nowait = true, remap = false },
      { "<leader>L", group = "LSP", nowait = true, remap = false },
      { "<leader>Li", "<cmd>LspInfo<CR>", desc = "LSP Info", nowait = true, remap = false },
      { "<leader>Lm", "<cmd>Mason<CR>", desc = "Mason", nowait = true, remap = false },
      { "<leader>Ll", "<cmd>Lazy<CR>", desc = "Lazy", nowait = true, remap = false },
      { "<leader>q", "<cmd>wqall!<CR>", desc = "Save and quit all", nowait = true, remap = false },
      { "<leader>c", "<cmd>bn|bd#<CR>", desc = "Close buffer", nowait = true, remap = false },
      { "<leader>e", "<cmd>Neotree toggle<CR>", desc = "File Explorer", nowait = true, remap = false },
      { "<leader>f", "<cmd>Telescope find_files<CR>", desc = "Find Files", nowait = true, remap = false },
      { "<leader>h", "<cmd>nohlsearch<CR>", desc = "No Highlight", nowait = true, remap = false },
      { "<leader>l", group = "LSP Actions", nowait = true, remap = false },
      { "<leader>lS", "<cmd>Telescope lsp_workspace_symbols<CR>", desc = "Workspace Symbols", nowait = true, remap = false },
      { "<leader>la", "<cmd>lua vim.lsp.buf.code_action({apply=true})<CR>", desc = "Code Action", nowait = true, remap = false },
      { "<leader>ld", "<cmd>Trouble diagnostics<CR>", desc = "Workspace Diagnostics", nowait = true, remap = false },
      { "<leader>lf", "<cmd>lua vim.lsp.buf.format()<CR>", desc = "Format", nowait = true, remap = false },
      { "<leader>li", "<cmd>lua vim.lsp.buf.hover()<CR>", desc = "Hover Info", nowait = true, remap = false },
      { "<leader>ll", "<cmd>lua vim.diagnostic.open_float()<CR>", desc = "Line Diagnostic", nowait = true, remap = false },
      { "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<CR>", desc = "Rename", nowait = true, remap = false },
      { "<leader>lR", "<cmd>lua require'popui.references-navigator'()<CR>", desc = "References", nowait = true, remap = false },
      { "<leader>ls", "<cmd>Telescope lsp_document_symbols<CR>", desc = "Document Symbols", nowait = true, remap = false },
      { "<leader>lt", "<cmd>Tagbar<CR>", desc = "Tagbar", nowait = true, remap = false },
      { "<leader>p", "<cmd>Lazy<CR>", desc = "Plugins", nowait = true, remap = false },
      { "<leader>t", group = "Telescope", nowait = true, remap = false },
      { "<leader>tg", "<cmd>Telescope live_grep<CR>", desc = "Grep", nowait = true, remap = false },
      { "<leader>tt", "<cmd>Telescope treesitter<CR>", desc = "Tags", nowait = true, remap = false },
      { "<leader>d", group = "debug" },
      { "<leader>dd", "<cmd>lua require('dap').toggle_breakpoint()<CR>", desc = "Toggle Breakpoint" },
      { "<leader>dc", "<cmd>lua require('dap').continue()<CR>", desc = "Continue" },
      { "<leader>di", "<cmd>lua require('dap').step_into()<CR>", desc = "Step Into" },
      { "<leader>dl", "<cmd>lua require('dap').run_last()<CR>", desc = "Run Last" },
      { "<leader>do", "<cmd>lua require('dap').step_over()<CR>", desc = "Step Over" },
      { "<leader>dp", "<cmd>lua require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>", desc = "Set Log Point" },
      { "<leader>dq", "<cmd>lua require('dap').terminate()<CR>", desc = "Terminate" },
      { "<leader>dr", "<cmd>lua require('dap').repl.toggle()<CR>", desc = "Toggle REPL" },
      { "<leader>du", "<cmd>lua require('dap').step_out()<CR>", desc = "Step Out" },
    })
  end,
}
